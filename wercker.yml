box: python:3.6-slim
initial-build:
  steps:
    # Install packages
    - script:
      name: Install packages
      code: |
        pip install virtualenv
        apt update
        apt install -y build-essential
    - virtualenv:
      name: Setup virtualenv
      python_location: /usr/local/bin/python

    # This pip-install clears the local wheel cache
    - pip-install:
      clean_wheel_dir: true

    # A custom script step, name value is used in the UI
    # and the code value contains the command that get executed
    - script:
      name: echo python information
      code: |
        echo "python version $(python --version) running"
        echo "pip version $(pip --version) running"
    # Test app
    - script:
      name: test app
      code: pytest

  after-steps:
    - slack-notifier:
      channel: $SLACK_CHANNEL
      url: $SLACK_URL
      username: cicdbot

deploy-staging:
  steps:
    - script:
      name: Install ssh
      code: |
        apt update
        apt install -y ssh
    - add-to-known_hosts:
      hostname: 47.74.11.150
      fingerprint: cb:60:eb:56:00:e4:1c:55:0f:03:e3:a5:36:63:2e:c8
      type: rsa
    - add-ssh-key:
      keyname: PKEY
    - script:
      name: Install packages
      code: |
        ssh -tt tal@47.74.11.150 << EOF
           if [ -d "cicddemo" ]; then
               cd cicddemo && git pull
           else
               git clone git@bitbucket.org:talzeus/cicddemo.git cicddemo
               git checkout prerelease
           fi
           exit 0;
        EOF
        ssh -tt tal@47.74.11.150 'cd cicddemo && git pull'        
        ssh -tt tal@47.74.11.150 'sudo pip install virtualenv'
        ssh -tt tal@47.74.11.150 'cd cicddemo && virtualenv --distribute env'
        ssh -tt tal@47.74.11.150 'cd cicddemo && source ./env/bin/activate && pip install -r requirements.txt'
        ssh -tt tal@47.74.11.150 'cd cicddemo && sudo cp ./cicd.service /etc/systemd/system'
        ssh -tt tal@47.74.11.150 'sudo systemctl start cicd'
        ssh -tt tal@47.74.11.150 'sudo systemctl enable cicd'

prepare-production-image:
  steps:
    - aliyun-build-ecs-image:
      name: Build ECS Image
      access_key_id: $ACCESS_KEY_ID
      access_key_secret: $ACCESS_KEY_SECRET
      instance_id: $INSTANCE_ID
      region_id: $REGION_ID
      image_name: ha-cicd-image